# nginx.conf  --  docker-openresty
#
# This file is installed to:
#   `/usr/local/openresty/nginx/conf/nginx.conf`
# and is the file loaded by nginx at startup,
# unless the user specifies otherwise.
#
# It tracks the upstream OpenResty's `nginx.conf`, but removes the `server`
# section and adds this directive:
#     `include /etc/nginx/conf.d/*.conf;`
#
# The `docker-openresty` file `nginx.vh.default.conf` is copied to
# `/etc/nginx/conf.d/default.conf`.  It contains the `server section
# of the upstream `nginx.conf`.
#
# See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files
#


#
user  www;
#worker_processes 1;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;



#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}

env WEEDFS_ADDR;

http {
    include       mime.types;
    default_type  application/octet-stream;

    # Enables or disables the use of underscores in client request header fields.
    # When the use of underscores is disabled, request header fields whose names contain underscores are marked as invalid and become subject to the ignore_invalid_headers directive.
    # underscores_in_headers off;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

        # Log in JSON Format
        # log_format nginxlog_json escape=json '{ "timestamp": "$time_iso8601", '
        # '"remote_addr": "$remote_addr", '
        #  '"body_bytes_sent": $body_bytes_sent, '
        #  '"request_time": $request_time, '
        #  '"response_status": $status, '
        #  '"request": "$request", '
        #  '"request_method": "$request_method", '
        #  '"host": "$host",'
        #  '"upstream_addr": "$upstream_addr",'
        #  '"http_x_forwarded_for": "$http_x_forwarded_for",'
        #  '"http_referrer": "$http_referer", '
        #  '"http_user_agent": "$http_user_agent", '
        #  '"http_version": "$server_protocol", '
        #  '"nginx_access": true }';
        # access_log /dev/stdout nginxlog_json;

    # See Move default writable paths to a dedicated directory (#119)
    # https://github.com/openresty/docker-openresty/issues/119
    client_body_temp_path /var/run/openresty/nginx-client-body;
    proxy_temp_path       /var/run/openresty/nginx-proxy;
    fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
    uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
    scgi_temp_path        /var/run/openresty/nginx-scgi;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;

  
    # Don't reveal OpenResty version to clients.
    # server_tokens off;

    # lua_package_path '/opt/HSAPI/lua/?.lua;/blah/?.lua;;';
    resolver 127.0.0.11 ipv6=off valid=10s;

    server {
      listen 80 default_server;

      server_name _;

      charset utf-8;

      set_by_lua $weed_img_root_url 'return os.getenv("WEEDFS_ADDR")';

      location / {
        default_type text/html;

        content_by_lua_block {
          ngx.say("Server is running , weed_img_root_url is ",ngx.var.weed_img_root_url," , local_img_fs_root is ",ngx.var.local_img_fs_root," , local_audio_fs_root is ",ngx.var.local_audio_fs_root," , WEEDFS_ADDR is ",os.getenv("WEEDFS_ADDR"))
        }
      }

      location /status  {
        stub_status on;
        access_log   off;
      }

      location ~ ^/file/upload {
        default_type application/json;
        content_by_lua_block {
          local seaweedfs = require "resty.seaweedfs"
          local options = {
            master_url = ngx.var.weed_img_root_url,
            hash = 'SHA256'
          }
          ngx.log(ngx.INFO,"weed_img_root_url:",ngx.var.weed_img_root_url)
          local fs = seaweedfs:new(options)
          local cjson = require "cjson"
          local code , body = fs:upload()
          ngx.status = code
          if (code >= 200 and code < 300) then
            ngx.say(cjson.encode(body))
          else
            ngx.say(body)
          end
          return ngx.exit(code)
        }
      }

      location ~ ^/file/download/(.+)$ {
        set $f_id $1;
        content_by_lua_block {
          local seaweedfs = require "resty.seaweedfs"
          local options = {
            master_url = ngx.var.weed_img_root_url
          }
          local fs = seaweedfs:new(options)
          local code , body = fs:get(ngx.var.f_id)
          if code == 200 then
            ngx.say(body)
            ngx.flush(true)
            return ngx.exit(code)
          else
            ngx.say(body)
            return ngx.exit(code)
          end
        }
      }

        #sample:/_img/?size=orig&volumn=1&id=1234
      location /_img/{
            default_type  image/jpeg;
            if ($request_method = 'DELETE' ) {
                return 405;
            }
            if ($request_method = 'PUT' ) {
                return 405;
            }
            if ($request_method = 'POST' ) {
                return 405;
            }

            content_by_lua_file lua/media.lua;
            expires      30d;
#            access_log off;
      }

      location  /file/img/{
        rewrite  "/file/img/([0-9]+x[0-9]+s?)/([0-9]+)/([a-z0-9]+)(\.[a-z]+)?" /_img/?type=img&size=$1&volumn=$2&id=$3 last;
        rewrite  "/file/img/([0-9]+x[0-9]+s?)/([0-9]+),([a-z0-9]+)(\.[a-z]+)?" /_img/?type=img&size=$1&volumn=$2&id=$3 last;
        rewrite  "/file/img/orig/([0-9]+)[,/]([a-z0-9]+)(\.[a-z]+)?" /_img/?type=img&size=orig&volumn=$1&id=$2 last;
        expires 30d;
            #            access_log off;
      }

    }
}